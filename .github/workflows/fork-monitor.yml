name: Fork Risk Monitor & Deploy

on:
  schedule:
    # Run every hour at minute 5
    - cron: '5 * * * *'
  workflow_dispatch:
    # Allow manual trigger for testing
    inputs:
      custom_rpc_url:
        description: 'Custom Ethereum RPC URL for testing'
        required: false
        type: string
    
  # Run on push to update data during development
  push:
    branches: [ main ]
    paths: [ 'scripts/**', 'contracts/**', 'src/**' ]

jobs:
  calculate-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # For pushing to gh-pages branch
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for gh-pages branch operations
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'  # Node 22 for native TypeScript support
          cache: 'npm'
          # TODO: When Node 23 becomes available on GitHub Actions, update to:
          # node-version: '23'  # Node 23 has TypeScript enabled by default
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build fork risk data
        run: npm run build:fork-data
        env:
          # Optional: Custom RPC can be provided via secrets or manual dispatch input
          # If not provided, will use public RPCs (no API key needed!)
          ETH_RPC_URL: ${{ secrets.ETH_RPC_URL || github.event.inputs.custom_rpc_url }}
          # TODO: When Node 23 is available, this will become:
          # run: node scripts/calculate-fork-risk.ts
      
      # Data is now written directly to public/data/ by the script
      
      - name: Build static site
        run: npm run build
        env:
          CI: true  # This triggers static build in astro.config.mjs
      
      - name: Deploy to GitHub Pages
        run: |
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Create a completely separate directory for gh-pages deployment
          cd /tmp
          rm -rf gh-pages-deploy
          mkdir gh-pages-deploy
          cd gh-pages-deploy
          
          # Initialize new git repo
          git init
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          
          # Copy ONLY the built files
          cp -r ${{ github.workspace }}/dist/* .
          
          # Add .nojekyll to bypass Jekyll processing
          touch .nojekyll
          
          # Verify what we're deploying
          echo "Files being deployed:"
          ls -la
          
          # Create initial commit
          git add .
          git commit -m "Deploy fork meter: $(date -u +"%Y-%m-%d %H:%M UTC")"
          
          # Force push to gh-pages branch
          git push -f origin HEAD:gh-pages
      
      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**Site URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
          
          # Extract key metrics from JSON using jq (more reliable than grep)
          if [ -f public/data/fork-risk.json ]; then
            if command -v jq >/dev/null 2>&1; then
              RISK_LEVEL=$(jq -r '.riskLevel' public/data/fork-risk.json)
              RISK_PERCENT=$(jq -r '.riskPercentage' public/data/fork-risk.json)
              LARGEST_BOND=$(jq -r '.metrics.largestDisputeBond' public/data/fork-risk.json)
              THRESHOLD_PERCENT=$(jq -r '.metrics.forkThresholdPercent' public/data/fork-risk.json)
              ACTIVE_DISPUTES=$(jq -r '.metrics.activeDisputes' public/data/fork-risk.json)
              RPC_ENDPOINT=$(jq -r '.rpcInfo.endpoint' public/data/fork-risk.json)
              RPC_LATENCY=$(jq -r '.rpcInfo.latency' public/data/fork-risk.json)
              
              echo "**Risk Level:** ${RISK_LEVEL}" >> $GITHUB_STEP_SUMMARY
              echo "**Risk Percentage:** ${RISK_PERCENT}%" >> $GITHUB_STEP_SUMMARY
              echo "**Largest Dispute Bond:** ${LARGEST_BOND} REP" >> $GITHUB_STEP_SUMMARY
              echo "**Fork Threshold Progress:** ${THRESHOLD_PERCENT}% of 275,000 REP" >> $GITHUB_STEP_SUMMARY
              echo "**Active Disputes:** ${ACTIVE_DISPUTES}" >> $GITHUB_STEP_SUMMARY
              echo "**RPC Used:** ${RPC_ENDPOINT} (${RPC_LATENCY}ms)" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Status:** Fork risk data calculated and deployed" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "✅ **Deployment:** Static site and data deployed to gh-pages branch" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Warning:** Fork risk data file not found" >> $GITHUB_STEP_SUMMARY
          fi